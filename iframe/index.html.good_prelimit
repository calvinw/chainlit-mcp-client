<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DoltHub Data Viewer</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Custom scrollbar styling */
        ::-webkit-scrollbar { width: 8px; height: 8px; }
        ::-webkit-scrollbar-track { background: #f1f1f1; border-radius: 10px; }
        ::-webkit-scrollbar-thumb { background: #888; border-radius: 10px; }
        ::-webkit-scrollbar-thumb:hover { background: #555; }

        /* Ensure body takes full height */
        html, body { height: 100%; margin: 0; font-family: 'Inter', sans-serif; }

        /* Main container layout */
        #main-container {
             height: calc(100vh - 2rem); /* Full viewport height minus padding */
             display: flex;
             flex-direction: column;
        }

        /* Style for active tab */
        .tab-button.active {
            border-color: #4f46e5; /* indigo-600 */
            color: #4f46e5;
            background-color: #eef2ff; /* indigo-50 */
        }
        /* Style for inactive tab */
        .tab-button {
            border-color: transparent;
        }
        /* Hide inactive tab content */
        .tab-content { display: none; }
        .tab-content.active { display: block; }

        /* Ensure table container within tab content stretches */
        .tab-content > div {
             height: 100%;
             display: flex;
             flex-direction: column;
        }
         .tab-content .table-wrapper {
            flex-grow: 1; /* Make table wrapper take available space */
            overflow-y: auto; /* Add scroll only to the table wrapper */
            border: 1px solid #e5e7eb; /* border-gray-200 */
            border-radius: 0.5rem; /* rounded-lg */
         }
         .tab-content table {
            min-width: 100%;
         }
          .tab-content thead {
            position: sticky;
            top: 0;
            z-index: 10;
            background-color: #f9fafb; /* bg-gray-50 */
         }

    </style>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
</head>
<body class="bg-gray-100 p-4">

    <div id="main-container" class="bg-white p-6 rounded-lg shadow-lg w-full">

        <!-- Input for Database Reference -->
        <div class="mb-4 flex space-x-2">
            <input type="text" id="db-ref-input" placeholder="Enter user/database/branch (e.g., calvinw/engagement/main)" class="flex-grow px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
            <button id="load-db-button" class="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">Load Database</button>
        </div>
         <div id="loading-tables-message" class="mb-4 text-gray-500 text-sm" style="display: none;">Loading tables...</div>

        <!-- Tab Navigation -->
        <div id="tab-navigation" class="mb-4 border-b border-gray-200 flex-shrink-0">
            <nav class="-mb-px flex space-x-4 overflow-x-auto" aria-label="Tabs">
                <!-- Tabs will be generated here -->
            </nav>
        </div>

        <!-- Tab Content Area -->
        <div id="tab-content-area" class="flex-grow overflow-hidden">
            <!-- Tab content will be generated here -->
        </div>

        <!-- General Error Message Area -->
        <div id="general-error-message" class="mt-4 text-red-600 text-center flex-shrink-0"></div>

    </div>

    <script>
        // --- Global State ---
        let currentDbRef = null; // Stores the current 'user/database/branch'
        let tableLoadStatus = {}; // Tracks loaded status for each table { tableName: boolean }

        // --- DOM References ---
        const dbRefInput = document.getElementById('db-ref-input');
        const loadDbButton = document.getElementById('load-db-button');
        const loadingTablesMessage = document.getElementById('loading-tables-message');
        const tabNavigation = document.getElementById('tab-navigation');
        const tabContentArea = document.getElementById('tab-content-area');
        const generalErrorMessageDiv = document.getElementById('general-error-message');

        // --- Function to Fetch Data and Populate a Specific Table ---
        async function fetchDataAndPopulateTable(dbRef, tableName) {
            const idPrefix = tableName.replace(/[^a-zA-Z0-9]/g, '_'); // Create a safe ID prefix
            // Get references to the specific table elements for this tab
            const tableHeaders = document.getElementById(`${idPrefix}-table-headers`);
            const tableBody = document.getElementById(`${idPrefix}-table-body`);
            const loadingIndicator = document.getElementById(`${idPrefix}-loading`);
            const tabErrorDiv = document.getElementById(`${idPrefix}-error`); // Error specific to this tab

            if (!tableHeaders || !tableBody || !loadingIndicator || !tabErrorDiv) {
                console.error(`Table elements not found for prefix: ${idPrefix} (table: ${tableName})`);
                generalErrorMessageDiv.textContent = `Error: Could not find table elements for ${tableName}.`;
                return;
            }

            // Show loading indicator, clear previous errors/content
            loadingIndicator.style.display = 'table-row';
            tabErrorDiv.textContent = '';
            tableBody.innerHTML = ''; // Clear previous body content if any
            tableHeaders.innerHTML = ''; // Clear previous headers

            // Construct the API URL
            const encodedQuery = encodeURIComponent(`SELECT * FROM \`${tableName}\` LIMIT`);
            const apiUrl = `https://www.dolthub.com/api/v1alpha1/${dbRef}?q=${encodedQuery}`;

            try {
                // Fetch data from the API
                const response = await fetch(apiUrl);

                // Check if the response is successful
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                // Parse the JSON response
                const data = await response.json();

                // Check if the data has the expected 'rows' property and it's an array
                if (!data || !Array.isArray(data.rows)) {
                    throw new Error('Invalid data format received from API.');
                }

                // Hide loading indicator
                loadingIndicator.style.display = 'none';

                const rows = data.rows;
                let headers = [];

                // --- Generate Table Headers ---
                if (data.schema && Array.isArray(data.schema)) {
                    headers = data.schema.map(col => col.columnName || 'N/A');
                } else if (rows.length > 0 && typeof rows[0] === 'object') {
                    // Fallback: try getting headers from first row if schema missing
                    headers = Object.keys(rows[0]);
                }

                tableHeaders.innerHTML = ''; // Clear any existing headers
                if (headers.length > 0) {
                    headers.forEach(header => {
                        const th = document.createElement('th');
                        th.scope = 'col';
                        th.className = 'px-6 py-3 text-left text-xs font-medium text-gray-500 tracking-wider';
                        th.textContent = header;
                        tableHeaders.appendChild(th);
                    });
                } else if (rows.length === 0) {
                    // If no headers and no rows, add a single header cell indicating no columns
                     const th = document.createElement('th');
                     th.scope = 'col';
                     th.className = 'px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider';
                     th.textContent = 'Table Schema';
                     tableHeaders.appendChild(th);
                }


                // --- Populate Table Body ---
                tableBody.innerHTML = ''; // Clear loading message or previous data
                if (rows.length === 0) {
                    const colspan = Math.max(1, headers.length); // Colspan should be at least 1
                    tableBody.innerHTML = `<tr><td colspan="${colspan}" class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 text-center">No data found for ${tableName}.</td></tr>`;
                    console.warn(`No rows found for ${tableName}:`, data);
                } else {
                    rows.forEach((row, index) => {
                        const tr = document.createElement('tr');
                        // Apply alternating row colors
                        tr.className = index % 2 === 0 ? 'bg-white' : 'bg-gray-50';

                        // Create a cell for each value in the row based on headers
                        headers.forEach(header => {
                            const td = document.createElement('td');
                            td.className = 'px-6 py-4 whitespace-nowrap text-sm text-gray-700';
                            // Handle potential null or undefined values
                            td.textContent = row[header] !== null && row[header] !== undefined ? row[header] : 'N/A';
                            tr.appendChild(td);
                        });
                        tableBody.appendChild(tr);
                    });
                }

                // Mark data as loaded for this tab
                tableLoadStatus[tableName] = true;

            } catch (error) {
                // Log the error to the console
                console.error(`Error fetching or processing data for ${tableName}:`, error);
                // Display an error message within the specific tab
                tabErrorDiv.textContent = `Failed to load data: ${error.message}. Check console for details.`;
                // Ensure loading indicator is hidden on error
                loadingIndicator.style.display = 'none';
                // Optionally display a generic error message too
                generalErrorMessageDiv.textContent = `An error occurred while loading data for ${tableName}.`;
            }
        }

        // --- Function to Switch Tabs ---
        function switchTab(tableName) {
            const targetIdPrefix = tableName.replace(/[^a-zA-Z0-9]/g, '_');
            // Update tab buttons appearance
            document.querySelectorAll('.tab-button').forEach(button => {
                button.classList.toggle('active', button.dataset.target === targetIdPrefix);
            });

            // Update tab content visibility
            document.querySelectorAll('.tab-content').forEach(content => {
                content.classList.toggle('active', content.id === `${targetIdPrefix}-content`);
            });

            // Fetch data if it hasn't been loaded yet for this tab
            if (currentDbRef && !tableLoadStatus[tableName]) {
                 console.log(`Fetching data for ${tableName} in ${currentDbRef}`);
                 fetchDataAndPopulateTable(currentDbRef, tableName);
            } else {
                 console.log(`Data for ${tableName} already loaded or dbRef not set.`);
            }

             // Clear general error message when switching tabs
             generalErrorMessageDiv.textContent = '';
        }

        // --- Function to Initialize Tabs and Content Areas ---
        function initializeTabsAndContent(tableNames) {
            const nav = tabNavigation.querySelector('nav');
            nav.innerHTML = ''; // Clear existing nav
            tabContentArea.innerHTML = ''; // Clear existing content
            tableLoadStatus = {}; // Reset load status

            if (!tableNames || tableNames.length === 0) {
                nav.innerHTML = '<span class="text-gray-500">No tables found or error loading tables.</span>';
                return;
            }

            tableNames.forEach((tableName, index) => {
                const idPrefix = tableName.replace(/[^a-zA-Z0-9]/g, '_');
                tableLoadStatus[tableName] = false; // Mark as not loaded initially

                // Create Tab Button
                const button = document.createElement('button');
                button.className = 'tab-button whitespace-nowrap py-3 px-4 border-b-2 font-medium text-sm text-gray-500 hover:text-gray-700 hover:border-gray-300 focus:outline-none';
                button.textContent = tableName;
                button.dataset.target = idPrefix; // Link button to content ID
                button.dataset.tablename = tableName; // Store table name
                button.onclick = () => switchTab(tableName);
                nav.appendChild(button);

                // Create Tab Content Area
                const contentDiv = document.createElement('div');
                contentDiv.id = `${idPrefix}-content`;
                contentDiv.className = 'tab-content h-full'; // Add h-full
                contentDiv.innerHTML = `
                    <div class="table-wrapper">
                        <table class="divide-y divide-gray-200">
                            <thead class="bg-gray-50">
                                <tr id="${idPrefix}-table-headers"></tr>
                            </thead>
                            <tbody id="${idPrefix}-table-body" class="bg-white divide-y divide-gray-200">
                                <tr id="${idPrefix}-loading" style="display: none;"> <!-- Initially hidden -->
                                    <td colspan="100%" class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 text-center">Loading ${tableName} data...</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                     <div id="${idPrefix}-error" class="mt-2 text-red-500 text-sm flex-shrink-0"></div>
                `;
                tabContentArea.appendChild(contentDiv);

                // Activate the first tab by default
                if (index === 0) {
                    button.classList.add('active');
                    contentDiv.classList.add('active');
                    // Fetch data for the first tab immediately after setting up tabs
                    fetchDataAndPopulateTable(currentDbRef, tableName);
                }
            });
        }

        // --- Function to Load Database Tables ---
        async function loadDatabase() {
            const dbRef = dbRefInput.value.trim();
            if (!dbRef || !dbRef.includes('/')) {
                generalErrorMessageDiv.textContent = 'Please enter a valid database reference (e.g., user/database/branch).';
                return;
            }

            currentDbRef = dbRef; // Store the current reference
            generalErrorMessageDiv.textContent = ''; // Clear previous errors
            loadingTablesMessage.style.display = 'block'; // Show loading message
            tabNavigation.querySelector('nav').innerHTML = ''; // Clear old tabs
            tabContentArea.innerHTML = ''; // Clear old content

            // --- Use SHOW TABLES Query ---
            const encodedQuery = encodeURIComponent('SHOW TABLES;');
            // --- End Use SHOW TABLES Query ---

            const apiUrl = `https://www.dolthub.com/api/v1alpha1/${dbRef}?q=${encodedQuery}`;
            console.log(`Fetching tables using SHOW TABLES from: ${apiUrl}`); // Log the URL

            try {
                generalErrorMessageDiv.textContent = ''; // Clear previous errors before fetch
                const response = await fetch(apiUrl);

                if (!response.ok) {
                    let errorText = `HTTP error! status: ${response.status}`;
                    try {
                        // Try to get more specific error text from the response body
                        const bodyText = await response.text();
                        errorText += ` - ${bodyText}`;
                    } catch (textError) {
                        console.warn("Could not read error response body:", textError);
                    }
                    // Log the detailed error before throwing
                    console.error("API request failed:", errorText);
                    throw new Error(errorText); // Throw the detailed error
                }

                const data = await response.json();
                console.log("API response data:", data); // Log the received data

                if (!data || !Array.isArray(data.rows)) {
                     console.error("Invalid data format received:", data);
                    throw new Error('Invalid response format when fetching tables.');
                }

                 // Dynamically get the column name for tables from the schema
                 if (!data.schema || data.schema.length === 0 || !data.schema[0].columnName) {
                     console.error("Invalid schema format received for SHOW TABLES:", data.schema);
                     throw new Error("Could not determine table name column from schema.");
                 }
                 const tableNameColumn = data.schema[0].columnName;
                 console.log(`Using column name '${tableNameColumn}' for table names.`);

                const tableNames = data.rows.map(row => row[tableNameColumn]).filter(name => name && !name.startsWith('dolt_')); // Filter out null/empty and dolt_ tables just in case
                console.log("Found tables:", tableNames); // Log the extracted table names

                if (tableNames.length === 0) {
                     console.warn("No tables found in the database reference:", dbRef);
                     tabNavigation.querySelector('nav').innerHTML = '<span class="text-gray-500">No tables found in this database/branch.</span>';
                     tabContentArea.innerHTML = ''; // Clear content area
                } else {
                    initializeTabsAndContent(tableNames);
                }

            } catch (error) {
                // Ensure error object is logged properly
                console.error('Caught error during table loading:', error);
                // Display a more informative error message
                generalErrorMessageDiv.textContent = `Failed to load tables. ${error.message || 'An unknown error occurred.'}`;
                tabNavigation.querySelector('nav').innerHTML = '<span class="text-red-500">Error loading tables. Check console for details.</span>';
            } finally {
                 loadingTablesMessage.style.display = 'none'; // Hide loading message
            }
        }

        // --- Initial Setup ---
        loadDbButton.addEventListener('click', loadDatabase);
        // Add listener for Enter key in the input field
        dbRefInput.addEventListener('keypress', function(event) {
            if (event.key === 'Enter') {
                event.preventDefault(); // Prevent default form submission if it were in a form
                loadDatabase();
            }
        });

    </script>

</body>
</html>
